{
    "incorrectCode": "#include<bits/stdc++.h>\nusing namespace std;\nint n,m,x,y,v,c;\nint a[1005][1005];\nint dp[1005][1005];\nconst int inf=1e7*-1;\nvoid fun1(){\n    for(int i=x;i>=1;i--){\n        for(int j=y;j>=1;j--){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j+1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i+1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i+1][j]+a[i][j],dp[i][j+1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}void fun2(){\n    for(int i=x;i>=1;i--){\n        for(int j=y;j<=m;j++){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j+1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i-1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i-1][j]+a[i][j],dp[i][j+1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}void fun3(){\n    for(int i=x;i<=n;i++){\n        for(int j=y;j<=m;j++){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j-1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i-1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i-1][j]+a[i][j],dp[i][j-1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}void fun4(){\n    for(int i=x;i>=1;i--){\n        for(int j=y;j<=m;j++){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j-1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i+1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i+1][j]+a[i][j],dp[i][j-1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}\nint main(){\n    freopen('escape.in', 'r', stdin);\n    freopen('escape.out', 'w', stdout);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    cin>>n>>m>>x>>y>>v>>c;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            cin>>a[i][j];\n        }\n    }\n    fun1(),fun2(),fun3(),fun4();\n    if(dp[1][1]<0&&dp[1][m]<0&&dp[n][1]<0&&dp[n][m]<0) cout<<-1;\n    else cout<<max(dp[1][1],max(dp[1][m],max(dp[n][1],dp[n][m])));\n    return 0;\n}\n",
    "problemId": 62650,
    "problemDescription": "# Escape\n\nMr. Garlic is playing an escape game. On a $n \times m$ rectangular map, Mr. Garlic is at one point. Each cell on the map has a blood-boosting potion and a blood-losing flame. The potency of the potions is different, and the size of the flames is also different. Each cell has a number. If the number is positive, it means it is a potion representing increased health points. If it is negative, it means it is a flame representing lost health points.\n\nMr. Garlic initially has $v$ health points, and his maximum health is $c$. At any time, his health points cannot exceed the maximum health. If his health points reach $0$, he will die and cannot continue the game.\n\nThe four corners of the rectangular map, $(1, 1)$, $(1, m)$, $(n, 1)$, and $(n, m)$, are the exits of the game. Once an exit is selected in the game, you must move in that direction. For example, if you choose the lower-left exit, you can only move left and down; if you choose the upper-right exit, you can only move right and up; the same goes for the upper-left and lower-right exits.\n\nIf you escape successfully, the higher the remaining health points, the higher the game score. To get the highest score, please help calculate the maximum remaining health points if you escape successfully, and output $-1$ if you cannot escape.\n\n### Input Format\n\nIn the first line, enter integers $n$, $m$, $x$, $y$, $v$, $c$ in sequence ($1 < n,m \\leq 1000$, $1 \\leq x \\leq n$, $1 \\leq y \\leq m$, $1 \\leq v \\leq c \\leq 10000$), where $n, m$ represent the map size, $(x, y)$ represents Mr. Garlic's initial position, $v$ represents Mr. Garlic's initial health points, and $c$ represents Mr. Garlic's maximum health points.\n\nThe following $n$ lines, each line has $m$ numbers, representing the map information (the absolute value of each number does not exceed $100$, and the value of Mr. Garlic's initial position on the map must be $0$).\n\n### Output Format\n\nOutput a single number on one line, representing the maximum remaining health points if you escape successfully, or output $-1$ if you fail.\n\n",
    "judgeResult": {
        "problemId": 62650,
        "timeLimit": 1000,
        "memoryLimit": 131072,
        "fileName": "escape",
        "case_cnt": 5,
        "notac": [
            {
                "nantiStatusId": 12337815,
                "compileErrorLog": "[{'kind': 'warning', 'locations': [{'finish': {'line': 40, 'file': 'Main.cpp', 'column': 36}, 'caret': {'line': 40, 'file': 'Main.cpp', 'column': 12}, 'start': {'line': 40, 'file': 'Main.cpp', 'column': 5}}], 'option': '-Wunused-result', 'option_url': 'https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-result', 'message': 'ignoring return value of \\u2018FILE* freopen(const char*, const char*, FILE*)\\u2019 declared with attribute \\u2018warn_unused_result\\u2019'}, {'kind': 'warning', 'locations': [{'finish': {'line': 41, 'file': 'Main.cpp', 'column': 38}, 'caret': {'line': 41, 'file': 'Main.cpp', 'column': 12}, 'start': {'line': 41, 'file': 'Main.cpp', 'column': 5}}], 'option': '-Wunused-result', 'option_url': 'https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-result', 'message': 'ignoring return value of \\u2018FILE* freopen(const char*, const char*, FILE*)\\u2019 declared with attribute \\u2018warn_unused_result\\u2019'}]",
                "statusFlag": 6,
                "extra": {
                    "testcase": {
                        "total": 15,
                        "passed": 0
                    },
                    "time": [
                        2,
                        1,
                        1,
                        1,
                        1
                    ],
                    "statuses": [
                        6,
                        6,
                        6,
                        6,
                        6
                    ],
                    "memory": [
                        5368,
                        5440,
                        5532,
                        5436,
                        5336
                    ]
                },
                "errorOnCase": 0
            },
            {
                "nantiStatusId": 12340173,
                "compileErrorLog": "[{'kind': 'warning', 'locations': [{'finish': {'line': 49, 'file': 'Main.cpp', 'column': 36}, 'caret': {'line': 49, 'file': 'Main.cpp', 'column': 12}, 'start': {'line': 49, 'file': 'Main.cpp', 'column': 5}}], 'option': '-Wunused-result', 'option_url': 'https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-result', 'message': 'ignoring return value of \\u2018FILE* freopen(const char*, const char*, FILE*)\\u2019 declared with attribute \\u2018warn_unused_result\\u2019'}, {'kind': 'warning', 'locations': [{'finish': {'line': 50, 'file': 'Main.cpp', 'column': 38}, 'caret': {'line': 50, 'file': 'Main.cpp', 'column': 12}, 'start': {'line': 50, 'file': 'Main.cpp', 'column': 5}}], 'option': '-Wunused-result', 'option_url': 'https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-result', 'message': 'ignoring return value of \\u2018FILE* freopen(const char*, const char*, FILE*)\\u2019 declared with attribute \\u2018warn_unused_result\\u2019'}]",
                "statusFlag": 6,
                "extra": {
                    "testcase": {
                        "total": 15,
                        "passed": 0
                    },
                    "time": [
                        2,
                        1,
                        2,
                        1,
                        2
                    ],
                    "statuses": [
                        6,
                        6,
                        6,
                        6,
                        6
                    ],
                    "memory": [
                        5416,
                        5372,
                        5404,
                        5372,
                        5376
                    ]
                },
                "errorOnCase": 0
            }
        ],
        "ac": {
            "nantiStatusId": 12340213,
            "compileErrorLog": "",
            "statusFlag": 4,
            "extra": {
                "testcase": {
                    "total": 10,
                    "pass": 10
                },
                "time": [
                    2,
                    1,
                    1,
                    1,
                    29,
                    29,
                    29,
                    29,
                    6,
                    65
                ],
                "statuses": [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                "memory": [
                    8404,
                    8404,
                    8404,
                    8404,
                    8404,
                    8404,
                    8404,
                    8404,
                    8404,
                    8404
                ]
            },
            "submitTime": 1661915327
        }
    },
    "tutorGuidance": "Initialize dp[x][y] with the value v.\n",
    "solutionDescription": "This is essentially the same as Mr. Garlic going home. However, here we need to enumerate the four directions separately. We can control the direction through direction variables, which is a small trick that can reduce the amount of code.\n\nAdditionally, we need to handle another issue. In the middle, when encountering a $dp[i][j]$ less than or equal to $0$, assign $dp[i][j]$ to $-\\infty$ to prevent this position from transferring to the next state (even if it does, it will have no effect). When $dp[i][j]$ is greater than $c$, assign $dp[i][j]$ to $c$ (as required by the problem).\n\n",
    "groudTruthCode": "#include<bits/stdc++.h>\nusing namespace std;\nint n,m,x,y,v,c;\nint a[1005][1005];\nint dp[1005][1005];\nconst int inf=1e7*-1;\nvoid fun1(){\n    for(int i=x;i>=1;i--){\n        for(int j=y;j>=1;j--){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j+1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i+1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i+1][j]+a[i][j],dp[i][j+1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}void fun2(){\n    for(int i=x;i>=1;i--){\n        for(int j=y;j<=m;j++){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j+1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i-1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i-1][j]+a[i][j],dp[i][j+1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}void fun3(){\n    for(int i=x;i<=n;i++){\n        for(int j=y;j<=m;j++){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j-1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i-1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i-1][j]+a[i][j],dp[i][j-1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}void fun4(){\n    for(int i=x;i>=1;i--){\n        for(int j=y;j<=m;j++){\n            if(i==x&&j==y) continue;\n            if(i==x) dp[i][j]=min(c,dp[i][j-1]+a[i][j]);\n            else if(j==y) dp[i][j]=min(c,dp[i+1][j]+a[i][j]);\n            else dp[i][j]=min(c,max(dp[i+1][j]+a[i][j],dp[i][j-1]+a[i][j]));\n            if(dp[i][j]<0) dp[i][j]=inf;\n        }\n    }\n}\nint main(){\n    freopen('escape.in', 'r', stdin);\n    freopen('escape.out', 'w', stdout);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    cin>>n>>m>>x>>y>>v>>c;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            cin>>a[i][j];\n        }\n    }\n    dp[x][y]=v;\n    fun1(),fun2(),fun3(),fun4();\n    \n    if(dp[1][1]<0&&dp[1][m]<0&&dp[n][1]<0&&dp[n][m]<0) cout<<-1;\n    else cout<<max(dp[1][1],max(dp[1][m],max(dp[n][1],dp[n][m])));\n    return 0;\n}\n",
    "statusId": 12340173,
    "userOut": "4\n"
}